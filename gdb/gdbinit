#
# ~/.gdbinit
#
# GDB init script
# See gdbinit(5) for more info

# command history
set history save on
set history size 10000
set history filename ~/.gdb_history

define peconnect
    # copied from s32ds -> run/debug settings -> Debugger -> commands:
    set mem inaccessible-by-default off
    set tcp auto-retry on
    set tcp connect-timeout 240
    set remotetimeout 60
    # - - -

    if $argc == 0
        set $pecore = 0
    else
        set $pecore = $arg0
    end
    eval "target extended-remote localhost:%d", 7244 + (2 * $pecore)
    eval "monitor selectcore %d", $pecore
end
document peconnect
Connect to PEmicro's gdb server
    param. 0: core# (default = 0)
end

define-prefix pemultiload
define pemultiload start
    monitor startmultiload
end
define pemultiload end
    monitor endmultiload
end
document pemultiload
Start/end a multiple file load on a PEmicro debug probe
While multiload is active, each `load` will write the binary only on RAM.
Actual flashing is done once multiload ends.

Useful on multi-core systems when flashing erases the whole ROM
end

define rregs-nxp
    source ~/src/dotconfig/gdb/nxp-s32k3-memreg.py
end
document rregs-nxp
Read REGisterS definitions (NXP)
Set convenience variables that aid in reading registers in NXP micros
end

# colored prompt
# (\[ and \] needed by gdb to calculate the prompt's print size)
set extended-prompt \[\e[0;1m\](gdb) \[\e[0m\]

# large listing
set listsize 21

# styling
set style disassembler enabled on
set style sources on
set style enabled on

# print prompt like LLDB's
# this needs to mess a bit with `style enabled` to work,
# but doesn't need # python integration
define native-lldb-prompt
    # `l .` needed to set "current line" so that `l -` works as we want
    # Try various strategies to hide its output line:
    # 1. save position to overwrite output later (might not work during scroll)
    # 2. set text output as invisible (fg color = bg color)
    set style enabled off
    echo \0337\033[8m
    with listsize 1 -- with style enabled off -- l .
    # restore saved cursor position, erase line and restore text format
    echo \0338\033[0K\033[1K\033[28m\033[0m
    with listsize 10 -- with style enabled on -- l -
    echo \033[32m
    set style enabled on
    # line number is still printed with previous colors
    with listsize 1 -- l .
    echo \033[0m
    with listsize 10 -- l
end

# LLDB-like prompt using python integration
# sometimes colors don't work (gdb bug?)
# `set style enabled on` + `list` seem to fix the issue
source ~/src/dotconfig/gdb/lldbPrompt.py

define hook-stop
    lldb-prompt
end
define hookpost-frame
    lldb-prompt
end
define hookpost-up
    lldb-prompt
end
define hookpost-down
    lldb-prompt
end

